{"version":3,"sources":["components/Header.jsx","components/Footer.jsx","scripts/config.js","components/Connection.jsx","components/teleop.jsx","components/RobotState.jsx","components/map.jsx","components/Home.jsx","components/About.jsx","components/body.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","Container","Navbar","bg","variant","expand","collapseOnSelect","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","Component","Footer","Config","ROSBRIDGE_SERVER_IP","ROSBRIDGE_SERVER_PORT","RECONNECTION_TIMER","CMD_VEL_TOPIC","Connection","state","Connected","ros","init_connection","this","window","ROSLIB","Ros","console","log","on","setState","setTimeout","connect","error","Alert","Teleop","handleMove","bind","handleStop","event","cmd_vel","Topic","name","messageType","twist","Message","linear","x","y","z","angular","publish","align","size","sticky","baseColor","stickColor","move","stop","RobotState","orientation","linear_velocity","angular_velocity","getRobotState","subscribe","message","pose","position","toFixed","getOrientationFromQuaternion","quaternion","q","Three","w","setFromQuaternion","Math","PI","Row","Col","Map","url","viewer","ROS2D","Viewer","divID","width","height","gridClient","OccupancyGridClient","rootObject","scene","continuous","scaleToDimensions","currentGrid","shift","Home","About","Body","path","element","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fbaac209.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Container,Navbar, Nav} from \"react-bootstrap\";\nclass Header extends Component{\n    render(){\n        return(\n         <Container>\n         <Navbar bg=\"dark\" variant = \"dark\" expand=\"lg\" collapseOnSelect>\n        \n          <Navbar.Brand href=\"#home\">React-ros-robot</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"me-auto\">\n              <Nav.Link href=\"/\">Home</Nav.Link>\n              <Nav.Link href=\"/About\">About</Nav.Link>            \n           </Nav>\n          </Navbar.Collapse>\n        \n      </Navbar>\n      </Container>);\n    }\n}\n\nexport default Header;","import React, { Component } from \"react\";\nimport { Container} from \"react-bootstrap\";\nclass Footer extends Component{\n    render(){\n        return(<Container><p className=\"text-center\">Vishy lab &copy;2021 </p></Container>);\n    }\n}\n\nexport default Footer;","const Config = {\n    ROSBRIDGE_SERVER_IP:\"192.168.29.131\",\n    ROSBRIDGE_SERVER_PORT:\"9090\",\n    RECONNECTION_TIMER: 3000,\n    CMD_VEL_TOPIC:\"/cmd_vel\"\n};\n\nexport default Config;","import React, { Component } from 'react';\nimport Alert from \"react-bootstrap/Alert\";\nimport  Config from \"../scripts/config\";\nclass Connection extends Component {\n    state = { \n        Connected: false,\n        ros: null\n     };\n     constructor(){\n         super(); \n         this.init_connection();\n     }\n    init_connection(){\n        this.state.ros = new window.ROSLIB.Ros();//add window keyword as javascript library added in inex.html\n        console.log(this.state.ros);\n        this.state.ros.on(\"connection\",()=>{\n            console.log(\"Connection established\");\n            this.setState({Connected:true});\n        });\n        this.state.ros.on(\"close\",()=>{\n            console.log(\"connection is closed\");\n            this.setState({Connected:false});\n            setTimeout(()=>{\n            try{\n                this.state.ros.connect(\"ws://\"+Config.ROSBRIDGE_SERVER_IP+\":\"+Config.ROSBRIDGE_SERVER_PORT+\"\");\n            }catch(error){console.log(\"connection problem\")}\n            },Config.RECONNECTION_TIMER);\n        });\n        try{\n            this.state.ros.connect(\"ws://\"+Config.ROSBRIDGE_SERVER_IP+\":\"+Config.ROSBRIDGE_SERVER_PORT+\"\");\n        }catch(error){\n            console.log(\"connection problem\")\n        }\n        \n    }\n    render() { \n        return (\n            <div>\n                <Alert className=\"text-center m-3\" variant = {this.state.Connected?\"success\":\"danger\"}>\n                    {this.state.Connected? \"Robot Connected\":\"Robot disconnected\"}\n                </Alert>\n            </div>\n        );\n    }\n}\n \nexport default Connection;","import React, { Component } from 'react';\nimport { Joystick } from 'react-joystick-component';\nimport  Config from \"../scripts/config\";\nclass Teleop extends Component {\n    state = {\n        Connected: false,\n        ros:null\n    };\n    constructor(){\n        super(); \n        this.init_connection();\n        this.handleMove = this.handleMove.bind(this)//to use this inside the handlemove function.\n        this.handleStop = this.handleStop.bind(this)\n    }\n    init_connection(){\n        this.state.ros = new window.ROSLIB.Ros();//add window keyword as javascript library added in index.html\n        console.log(this.state.ros);\n        this.state.ros.on(\"connection\",()=>{\n            console.log(\"Connection established\");\n            this.setState({Connected:true});\n        });\n        this.state.ros.on(\"close\",()=>{\n            console.log(\"connection is closed\");\n            this.setState({Connected:false});\n            setTimeout(()=>{\n            try{\n                this.state.ros.connect(\"ws://\"+Config.ROSBRIDGE_SERVER_IP+\":\"+Config.ROSBRIDGE_SERVER_PORT+\"\");\n            }catch(error){console.log(\"connection problem\")}\n            },Config.RECONNECTION_TIMER);\n        });\n        try{\n            this.state.ros.connect(\"ws://\"+Config.ROSBRIDGE_SERVER_IP+\":\"+Config.ROSBRIDGE_SERVER_PORT+\"\");\n        }catch(error){\n            console.log(\"connection problem\")\n        }\n        \n    }\n    handleMove(event){\n        console.log(\"move\")\n        //Create ROS publisher on the topic cmd_vel\n        var cmd_vel = new window.ROSLIB.Topic({\n          ros:this.state.ros,\n          name:  Config.CMD_VEL_TOPIC,\n          messageType:\"geometry_msgs/Twist\"\n        })\n        //we need to create a twist message to be published to rosbridge\n        var twist = new window.ROSLIB.Message({\n            linear:{\n                x: event.y/100,\n                y: 0.0,\n                z: 0.0,\n            },\n            angular:{\n                x: 0.0,\n                y: 0.0,\n                z: -event.x/100,\n                },\n            });\n        //we need to publish the message on the cmd_vel topic\n        cmd_vel.publish(twist)\n    }\n    handleStop(event){\n        console.log(\"stop\")\n        var cmd_vel = new window.ROSLIB.Topic({\n            ros:this.state.ros,\n            name:  Config.CMD_VEL_TOPIC,\n            messageType:\"geometry_msgs/Twist\"\n          })\n          //we need to create a twist message to be published to rosbridge\n          var twist = new window.ROSLIB.Message({\n              linear:{\n                  x: 0,\n                  y: 0.0,\n                  z: 0.0,\n              },\n              angular:{\n                  x: 0.0,\n                  y: 0.0,\n                  z: 0,\n                  },\n              });\n          //we need to publish the message on the cmd_vel topic\n          cmd_vel.publish(twist)\n    }\n    render() { \n        return (\n        <div align=\"center\">\n            <h2>Teleoperation\n            </h2>\n            <br/>\n            <br/>\n            <Joystick \n                size={100} \n                sticky={false} \n                baseColor= \"#d5d5d5\"\n                stickColor=\"#a19f9e\" \n                move={this.handleMove} \n                stop={this.handleStop}></Joystick>\n        </div>);\n    }\n} ;\nexport default Teleop;","import React, { Component } from 'react';\nimport { Row,Col,Container,Button } from \"react-bootstrap\";\nimport  Config from \"../scripts/config\";\nimport * as Three from \"three\";\nclass RobotState extends Component{\n    state = {\n        ros:null,\n        x:0,\n        y:0,\n        orientation:0,\n        linear_velocity:0,\n        angular_velocity:0\n    };\n    constructor(){\n        super(); \n        this.init_connection();\n    }\n    init_connection(){\n        this.state.ros = new window.ROSLIB.Ros();//add window keyword as javascript library added in index.html\n        console.log(this.state.ros);\n        this.state.ros.on(\"connection\",()=>{\n            console.log(\"Connection established\");\n            this.setState({Connected:true});\n        });\n        this.state.ros.on(\"close\",()=>{\n            console.log(\"connection is closed\");\n            this.setState({Connected:false});\n            setTimeout(()=>{\n            try{\n                this.state.ros.connect(\"ws://\"+Config.ROSBRIDGE_SERVER_IP+\":\"+Config.ROSBRIDGE_SERVER_PORT+\"\");\n            }catch(error){console.log(\"connection problem\")}\n            },Config.RECONNECTION_TIMER);\n        });\n        try{\n            this.state.ros.connect(\"ws://\"+Config.ROSBRIDGE_SERVER_IP+\":\"+Config.ROSBRIDGE_SERVER_PORT+\"\");\n        }catch(error){\n            console.log(\"connection problem\")\n        }\n        \n    }\n    componentDidMount(){\n        this.getRobotState();\n    }\n    getRobotState() {\n    var pose_subscriber = new window.ROSLIB.Topic({\n        ros:this.state.ros,\n        name: \"/amcl_pose\",\n        messageType:\"geometry_msgs/PoseWithCovarianceStamped\"\n    });\n     pose_subscriber.subscribe((message) => {\n         this.setState({x: message.pose.pose.position.x.toFixed(2)});\n         this.setState({y: message.pose.pose.position.y.toFixed(2)});\n         this.setState({orientation: this.getOrientationFromQuaternion(message.pose.pose.orientation).toFixed(2)\n        });\n     });\n     var velocity_subscriber = new window.ROSLIB.Topic({\n         ros:this.state.ros,\n         name:\"/odom\",\n         messageType:\"nav_msgs/Odometry\"\n     });\n     velocity_subscriber.subscribe((message)=>{\n        this.setState({linear_velocity:message.twist.twist.linear.x.toFixed(2)});\n        this.setState({angular_velocity:message.twist.twist.angular.z.toFixed(2)});\n     });\n    }\n    getOrientationFromQuaternion(quaternion){\n        var q = new Three.Quaternion(quaternion.x,\n            quaternion.y,\n            quaternion.z,\n            quaternion.w\n            );\n        var RPY = new Three.Euler().setFromQuaternion(q);\n        return RPY[\"_z\"]*(180/Math.PI)//yaw\n    }\n\n    render(){\n        return(\n            <div>\n               <Row>\n                   <Col>\n                    <h4 className='mt-4'>Position</h4>\n                    <p className='mt-0'>x: {this.state.x}</p>\n                    <p className='mt-0'>y: {this.state.y}</p>\n                    <p className='mt-0'>orientation: {this.state.orientation}</p>\n                   </Col>\n               </Row>\n               <Row>\n                   <Col>\n                    <h4 className='mt-4'>Velocities</h4>\n                    <p className='mt-0'>linear velocity: {this.state.linear_velocity}</p>\n                    <p className='mt-0'>angular velocity: {this.state.angular_velocity}</p>\n                   </Col>\n               </Row>\n            </div>\n        );\n    }\n}\nexport default RobotState;","import React, { Component } from 'react';\n// import  Config from \"../scripts/config\";\n\nclass Map extends Component{\n    init() {\n        var ros = new window.ROSLIB.Ros({\n        url : 'ws://localhost:9090'\n        });\n        var viewer = new window.ROS2D.Viewer({ \n          divID : 'turtle_ws/src/turtlebot3_simulations/turtlebot3_gazebo/map',\n          width : 400,\n          height : 400\n        });\n        var gridClient = new window.ROS2D.OccupancyGridClient({\n        ros : ros,\n        rootObject : viewer.scene,\n        continuous: true\n        });\n        gridClient.on('change', function(){\n          viewer.scaleToDimensions(gridClient.currentGrid.width, gridClient.currentGrid.height);\n          viewer.shift(gridClient.currentGrid.pose.position.x, gridClient.currentGrid.pose.position.y);\n        });\n      }\n    render() { \n        \n        return (\n            \n            <div id=\"map\" >               \n            </div>\n            \n        )\n      \n      \n    }\n\n};\nexport default Map;","import React, { Component } from \"react\";\nimport { Row,Col,Container } from \"react-bootstrap\";\nimport Connection from \"./Connection\";\nimport Teleop from \"./teleop\";\nimport RobotState from \"./RobotState\"\nimport Map from \"./map\";\nclass Home extends Component{\n    state = {\n       \n    };\n\n    render(){\n        return (\n            <div>\n                <Container>\n                    <h1 className=\"text-center mt-3\">Robot Control Page</h1>\n                    <Row>\n                        <Col> \n                            <Connection />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <Teleop />\n                        </Col>\n                        <Col>\n                            <Map />\n                        </Col>\n                    </Row>\n                   <Row>\n                       <Col>\n                          <RobotState />\n                       </Col>\n                   </Row>\n                    \n                </Container>\n            </div>\n            );\n    }\n}\nexport default Home;","import React, { Component } from \"react\";\nclass About extends Component{\n    state = {};\n    render(){\n        return (\n        <div> \n            <h1>About</h1>\n            <p>This react app controls and monitors ROS-enabled robot through web</p>\n        </div>\n        );\n    }\n}\nexport default About;","import React, { Component } from \"react\";\nimport { Container} from \"react-bootstrap\";\nimport {Route,BrowserRouter as Router,Routes} from \"react-router-dom\";\nimport Home from \"./Home\";\nimport About from \"./About\";\nclass Body extends Component{\n    render(){\n        return(\n            <Container>\n            <Router>\n            <Routes>\n            <Route path=\"/\"  element={<Home />}/>\n            <Route path=\"/About\" element={<About/>}/>\n            </Routes>\n            </Router>\n            </Container>\n            );\n    }\n}\n\nexport default Body;","import React from 'react';\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport Body from \"./components/body\";\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Header/>\n    <Body/>   \n    <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./bootstrap/darkly-bootstrap.min.css\";\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}